The core classes, functions, and methods that will be necessary are:

1. `MLPModel`: This class will define the multi-layer perceptron model. It will have methods for training the model and making predictions.

2. `train_model`: This function will be used to train the `MLPModel` using the provided dataset.

3. `predict_species`: This function will use the trained `MLPModel` to predict the species of a fish based on the provided measurements.

4. `app`: This will be the main Flask application object. It will define the routes for the web app.

5. `index`: This function will handle the main route ("/") of the web app. It will render the main page of the app.

6. `predict`: This function will handle the prediction route ("/predict") of the web app. It will take the user's input, use the `MLPModel` to make a prediction, and return the result.

7. `main`: This function will be the entry point of the application. It will start the Flask server.

Now, let's write the code for each file.

`requirements.txt`
```txt
flask==1.1.2
numpy==1.19.2
pandas==1.1.3
scikit-learn==0.23.2
```

`mlp_model.py`
```python
from sklearn.neural_network import MLPClassifier
import numpy as np

class MLPModel:
    def __init__(self):
        self.model = MLPClassifier(hidden_layer_sizes=(10, 10), max_iter=1000)

    def train(self, X, y):
        self.model.fit(X, y)

    def predict(self, X):
        return self.model.predict(X)
```

`train_model.py`
```python
import pandas as pd
from mlp_model import MLPModel

def train_model():
    # Load the dataset
    df = pd.read_csv('fish.csv')

    # Split the dataset into inputs and target
    X = df[['Weight', 'Length1', 'Length2', 'Length3', 'Height', 'Width']]
    y = df['Species']

    # Create and train the model
    model = MLPModel()
    model.train(X, y)

    # Save the trained model
    with open('model.pkl', 'wb') as f:
        pickle.dump(model, f)
```

`predict_species.py`
```python
import numpy as np
import pickle
from mlp_model import MLPModel

def predict_species(weight, length1, length2, length3, height, width):
    # Load the trained model
    with open('model.pkl', 'rb') as f:
        model = pickle.load(f)

    # Make a prediction
    X = np.array([weight, length1, length2, length3, height, width]).reshape(1, -1)
    prediction = model.predict(X)

    return prediction[0]
```

`app.py`
```python
from flask import Flask, render_template, request
from predict_species import predict_species

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    # Get the user's input
    weight = request.form['weight']
    length1 = request.form['length1']
    length2 = request.form['length2']
    length3 = request.form['length3']
    height = request.form['height']
    width = request.form['width']

    # Make a prediction
    species = predict_species(weight, length1, length2, length3, height, width)

    return render_template('result.html', species=species)

if __name__ == '__main__':
    app.run(debug=True)
```

`templates/index.html`
```html
<!DOCTYPE html>
<html>
<head>
    <title>Fish Species Predictor</title>
    <!-- Add your CSS and JavaScript files here -->
</head>
<body>
    <h1>Fish Species Predictor</h1>
    <form action="/predict" method="post">
        <label for="weight">Weight:</label><br>
        <input type="text" id="weight" name="weight"><br>
        <label for="length1">Length1:</label><br>
        <input type="text" id="length1" name="length1"><br>
        <label for="length2">Length2:</label><br>
        <input type="text" id="length2" name="length2"><br>
        <label for="length3">Length3:</label><br>
        <input type="text" id="length3" name="length3"><br>
        <label for="height">Height:</label><br>
        <input type="text" id="height" name="height"><br>
        <label for="width">Width:</label><br>
        <input type="text" id="width" name="width"><br>
        <input type="submit" value="Predict">
    </form>
</body>
</html>
```

`templates/result.html`
```html
<!DOCTYPE html>
<html>
<head>
    <title>Prediction Result</title>
    <!-- Add your CSS and JavaScript files here -->
</head>
<body>
    <h1>Prediction Result</h1>
    <p>The predicted species is: {{ species }}</p>
</body>
</html>
```

Please note that this is a basic implementation and does not include the "colorful and fancy" design with "fish and water animations" and a "blue, water background". You would need to add CSS and JavaScript files to achieve this design.